package policy

import (
	"fmt"
	"net/http"

	"github.com/paloaltonetworks/prisma-cloud-compute-go/collection"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/pcc"
)

const VulnerabilityHostEndpoint = "api/v1/policies/vulnerability/host"

type VulnerabilityHostPolicy struct {
	Id    string                  `json:"_id,omitempty"`
	Rules []VulnerabilityHostRule `json:"rules,omitempty"`
	Type  string                  `json:"policyType,omitempty"`
}

type VulnerabilityHostRule struct {
	AlertThreshold VulnerabilityHostThreshold `json:"alertThreshold,omitempty"`
	Collections    []collection.Collection    `json:"collections,omitempty"`
	CveRules       []VulnerabilityHostCveRule `json:"cveRules,omitempty"`
	Disabled       bool                       `json:"disabled"`
	Effect         string                     `json:"effect,omitempty"`
	GraceDays      int                        `json:"graceDays,omitempty"`
	Name           string                     `json:"name,omitempty"`
	Notes          string                     `json:"notes,omitempty"`
	OnlyFixed      bool                       `json:"onlyFixed"`
	TagRules       []VulnerabilityHostTagRule `json:"tags,omitempty"`
	Verbose        bool                       `json:"verbose"`
}

type VulnerabilityHostThreshold struct {
	Disabled bool `json:"disabled"`
	Enabled  bool `json:"enabled"`
	Value    int  `json:"value,omitempty"`
}

type VulnerabilityHostCveRule struct {
	Description string                      `json:"description,omitempty"`
	Effect      string                      `json:"effect,omitempty"`
	Expiration  VulnerabilityHostExpiration `json:"expiration,omitempty"`
	Id          string                      `json:"id,omitempty"`
}

type VulnerabilityHostTagRule struct {
	Description string                      `json:"description,omitempty"`
	Effect      string                      `json:"effect,omitempty"`
	Expiration  VulnerabilityHostExpiration `json:"expiration,omitempty"`
	Name        string                      `json:"name,omitempty"`
}

type VulnerabilityHostExpiration struct {
	Date    string `json:"date,omitempty"`
	Enabled bool   `json:"enabled"`
}

// Get the current host vulnerability policy.
func GetVulnerabilityHost(c pcc.Client) (VulnerabilityHostPolicy, error) {
	var ans VulnerabilityHostPolicy
	if err := c.Request(http.MethodGet, VulnerabilityHostEndpoint, nil, nil, &ans); err != nil {
		return ans, fmt.Errorf("error getting host vulnerability policy: %s", err)
	}
	return ans, nil
}

// Update the current host vulnerability policy.
func UpdateVulnerabilityHost(c pcc.Client, policy VulnerabilityHostPolicy) error {
	return c.Request(http.MethodPut, VulnerabilityHostEndpoint, nil, policy, nil)
}
